/* 
    给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
    返回 你可以获得的最大乘积 。

*/
/* 
确定递推公式:
    可以想 dp[i]最大乘积是怎么得到的呢？
    其实可以从1遍历j，然后有两种渠道得到dp[i].
    一个是j * (i - j) 直接相乘。
    一个是j * dp[i - j]，相当于是拆分(i - j)，对这个拆分不理解的话，可以回想dp数组的定义。
    也可以这么理解，j * (i - j) 是单纯的把整数拆分为两个数相乘，
    而j * dp[i - j]是拆分成两个以及两个以上的个数相乘

    那么在取最大值的时候，为什么还要比较dp[i]呢？
    因为在递推公式推导的过程中，每次计算dp[i]，取最大的而已。
*/
/**
 * @param {number} n
 * @return {number}
 */
 var integerBreak = function(n) {
    let dp= Array(n+1).fill(0)
    dp[2] = 1
    for(let i =3;i<=n;i++){
        for(let j =1;j<i;j++){
            dp[i] = Math.max(dp[i],j*(i-j),dp[i-j]*j)// 也可以这么理解，j * (i - j) 是单纯的把整数拆分为两个数相乘，
                                                    //而j * dp[i - j]是拆分成两个以及两个以上的个数相乘
        }
    }
    return dp[n]
};